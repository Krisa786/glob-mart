const request = require('supertest');
const app = require('../server');
const db = require('../database/models');
const AuthService = require('../services/AuthService');
const TokenService = require('../services/TokenService');

describe('Auth API Integration Tests', () => {
  let testUser;
  let testRole;

  beforeAll(async () => {
    // Sync database
    await db.sequelize.sync({ force: true });
    
    // Create test role
    testRole = await db.Role.create({
      name: 'CUSTOMER',
      description: 'Customer role'
    });
  });

  afterAll(async () => {
    await db.sequelize.close();
  });

  beforeEach(async () => {
    // Clean up test data
    await db.RefreshToken.destroy({ where: {} });
    await db.LoginAttempt.destroy({ where: {} });
    await db.PasswordReset.destroy({ where: {} });
    await db.User.destroy({ where: {} });
  });

  describe('POST /auth/register', () => {
    it('should register a new user successfully', async () => {
      const userData = {
        email: 'test@example.com',
        password: 'SecurePass123!',
        full_name: 'Test User',
        phone_country_code: '+1',
        phone: '1234567890'
      };

      const response = await request(app)
        .post('/auth/register')
        .send(userData)
        .expect(201);

      expect(response.body.success).toBe(true);
      expect(response.body.data.user.email).toBe(userData.email);
      expect(response.body.data.user.full_name).toBe(userData.full_name);
      expect(response.body.data.user.roles).toContain('CUSTOMER');
      expect(response.body.data.access_token).toBeDefined();
      expect(response.body.data.expires_in).toBe(900);
      expect(response.headers['set-cookie']).toBeDefined();
    });

    it('should fail registration with invalid email', async () => {
      const userData = {
        email: 'invalid-email',
        password: 'SecurePass123!',
        full_name: 'Test User'
      };

      const response = await request(app)
        .post('/auth/register')
        .send(userData)
        .expect(400);

      expect(response.body.success).toBe(false);
      expect(response.body.message).toBe('Validation failed');
    });

    it('should fail registration with weak password', async () => {
      const userData = {
        email: 'test@example.com',
        password: 'weak',
        full_name: 'Test User'
      };

      const response = await request(app)
        .post('/auth/register')
        .send(userData)
        .expect(400);

      expect(response.body.success).toBe(false);
    });

    it('should fail registration with duplicate email', async () => {
      const userData = {
        email: 'test@example.com',
        password: 'SecurePass123!',
        full_name: 'Test User'
      };

      // Register first user
      await request(app)
        .post('/auth/register')
        .send(userData)
        .expect(201);

      // Try to register with same email
      const response = await request(app)
        .post('/auth/register')
        .send(userData)
        .expect(400);

      expect(response.body.success).toBe(false);
      expect(response.body.message).toBe('User with this email already exists');
    });
  });

  describe('POST /auth/login', () => {
    beforeEach(async () => {
      // Create test user
      testUser = await db.User.create({
        uuid: 'test-uuid-123',
        email: 'test@example.com',
        password_hash: await require('argon2').hash('SecurePass123!'),
        full_name: 'Test User',
        is_active: true,
        is_email_verified: false
      });

      await db.UserRole.create({
        user_id: testUser.id,
        role_id: testRole.id
      });
    });

    it('should login successfully with valid credentials', async () => {
      const loginData = {
        email: 'test@example.com',
        password: 'SecurePass123!'
      };

      const response = await request(app)
        .post('/auth/login')
        .send(loginData)
        .expect(200);

      expect(response.body.success).toBe(true);
      expect(response.body.data.user.email).toBe(loginData.email);
      expect(response.body.data.access_token).toBeDefined();
      expect(response.body.data.expires_in).toBe(900);
    });

    it('should fail login with invalid credentials', async () => {
      const loginData = {
        email: 'test@example.com',
        password: 'WrongPassword123!'
      };

      const response = await request(app)
        .post('/auth/login')
        .send(loginData)
        .expect(401);

      expect(response.body.success).toBe(false);
      expect(response.body.message).toBe('Invalid email or password');
    });

    it('should fail login with non-existent email', async () => {
      const loginData = {
        email: 'nonexistent@example.com',
        password: 'SecurePass123!'
      };

      const response = await request(app)
        .post('/auth/login')
        .send(loginData)
        .expect(401);

      expect(response.body.success).toBe(false);
    });

    it('should require 2FA for admin users', async () => {
      // Create admin role and user
      const adminRole = await db.Role.create({
        name: 'ADMIN',
        description: 'Admin role'
      });

      const adminUser = await db.User.create({
        uuid: 'admin-uuid-123',
        email: 'admin@example.com',
        password_hash: await require('argon2').hash('SecurePass123!'),
        full_name: 'Admin User',
        is_active: true
      });

      await db.UserRole.create({
        user_id: adminUser.id,
        role_id: adminRole.id
      });

      // Create 2FA secret (stub)
      await db.TwoFASecret.create({
        user_id: adminUser.id,
        secret: 'test-secret',
        is_active: true
      });

      const loginData = {
        email: 'admin@example.com',
        password: 'SecurePass123!'
      };

      const response = await request(app)
        .post('/auth/login')
        .send(loginData)
        .expect(200);

      expect(response.body.success).toBe(true);
      expect(response.body.data.require_2fa).toBe(true);
    });
  });

  describe('POST /auth/refresh', () => {
    let refreshToken;

    beforeEach(async () => {
      // Create test user and get tokens
      testUser = await db.User.create({
        uuid: 'test-uuid-123',
        email: 'test@example.com',
        password_hash: await require('argon2').hash('SecurePass123!'),
        full_name: 'Test User',
        is_active: true
      });

      await db.UserRole.create({
        user_id: testUser.id,
        role_id: testRole.id
      });

      const tokens = await TokenService.issueTokens({
        id: testUser.id,
        uuid: testUser.uuid,
        email: testUser.email,
        roles: ['CUSTOMER']
      });

      refreshToken = tokens.refresh_token;
    });

    it('should refresh token successfully', async () => {
      const response = await request(app)
        .post('/auth/refresh')
        .send({ refresh_token: refreshToken })
        .expect(200);

      expect(response.body.success).toBe(true);
      expect(response.body.data.access_token).toBeDefined();
      expect(response.body.data.expires_in).toBe(900);
    });

    it('should refresh token using cookie', async () => {
      const response = await request(app)
        .post('/auth/refresh')
        .set('Cookie', `refresh_token=${refreshToken}`)
        .expect(200);

      expect(response.body.success).toBe(true);
      expect(response.body.data.access_token).toBeDefined();
    });

    it('should fail refresh with invalid token', async () => {
      const response = await request(app)
        .post('/auth/refresh')
        .send({ refresh_token: 'invalid-token' })
        .expect(401);

      expect(response.body.success).toBe(false);
    });

    it('should detect token reuse and revoke all sessions', async () => {
      // First refresh
      await request(app)
        .post('/auth/refresh')
        .send({ refresh_token: refreshToken })
        .expect(200);

      // Try to use old token again (should trigger reuse detection)
      const response = await request(app)
        .post('/auth/refresh')
        .send({ refresh_token: refreshToken })
        .expect(401);

      expect(response.body.success).toBe(false);
      expect(response.body.message).toBe('Security violation detected. Please login again.');
    });
  });

  describe('GET /auth/me', () => {
    let accessToken;

    beforeEach(async () => {
      // Create test user and get access token
      testUser = await db.User.create({
        uuid: 'test-uuid-123',
        email: 'test@example.com',
        password_hash: await require('argon2').hash('SecurePass123!'),
        full_name: 'Test User',
        is_active: true
      });

      await db.UserRole.create({
        user_id: testUser.id,
        role_id: testRole.id
      });

      const tokens = await TokenService.issueTokens({
        id: testUser.id,
        uuid: testUser.uuid,
        email: testUser.email,
        roles: ['CUSTOMER']
      });

      accessToken = tokens.access_token;
    });

    it('should get current user profile with valid token', async () => {
      const response = await request(app)
        .get('/auth/me')
        .set('Authorization', `Bearer ${accessToken}`)
        .expect(200);

      expect(response.body.success).toBe(true);
      expect(response.body.data.user.email).toBe('test@example.com');
      expect(response.body.data.user.full_name).toBe('Test User');
      expect(response.body.data.user.roles).toContain('CUSTOMER');
    });

    it('should fail without token', async () => {
      const response = await request(app)
        .get('/auth/me')
        .expect(401);

      expect(response.body.success).toBe(false);
      expect(response.body.message).toBe('Access token required');
    });

    it('should fail with invalid token', async () => {
      const response = await request(app)
        .get('/auth/me')
        .set('Authorization', 'Bearer invalid-token')
        .expect(401);

      expect(response.body.success).toBe(false);
    });
  });

  describe('POST /auth/logout', () => {
    let refreshToken;

    beforeEach(async () => {
      // Create test user and get tokens
      testUser = await db.User.create({
        uuid: 'test-uuid-123',
        email: 'test@example.com',
        password_hash: await require('argon2').hash('SecurePass123!'),
        full_name: 'Test User',
        is_active: true
      });

      await db.UserRole.create({
        user_id: testUser.id,
        role_id: testRole.id
      });

      const tokens = await TokenService.issueTokens({
        id: testUser.id,
        uuid: testUser.uuid,
        email: testUser.email,
        roles: ['CUSTOMER']
      });

      refreshToken = tokens.refresh_token;
    });

    it('should logout successfully', async () => {
      const response = await request(app)
        .post('/auth/logout')
        .send({ refresh_token: refreshToken })
        .expect(200);

      expect(response.body.success).toBe(true);
      expect(response.body.message).toBe('Logout successful');
    });

    it('should logout using cookie', async () => {
      const response = await request(app)
        .post('/auth/logout')
        .set('Cookie', `refresh_token=${refreshToken}`)
        .expect(200);

      expect(response.body.success).toBe(true);
    });
  });

  describe('POST /auth/forgot-password', () => {
    beforeEach(async () => {
      testUser = await db.User.create({
        uuid: 'test-uuid-123',
        email: 'test@example.com',
        password_hash: await require('argon2').hash('SecurePass123!'),
        full_name: 'Test User',
        is_active: true
      });
    });

    it('should initiate password reset for existing user', async () => {
      const response = await request(app)
        .post('/auth/forgot-password')
        .send({ email: 'test@example.com' })
        .expect(200);

      expect(response.body.success).toBe(true);
      expect(response.body.message).toBe('If the email exists, a password reset link has been sent');
    });

    it('should return same message for non-existent user (security)', async () => {
      const response = await request(app)
        .post('/auth/forgot-password')
        .send({ email: 'nonexistent@example.com' })
        .expect(200);

      expect(response.body.success).toBe(true);
      expect(response.body.message).toBe('If the email exists, a password reset link has been sent');
    });
  });

  describe('POST /auth/reset-password', () => {
    let resetToken;

    beforeEach(async () => {
      testUser = await db.User.create({
        uuid: 'test-uuid-123',
        email: 'test@example.com',
        password_hash: await require('argon2').hash('SecurePass123!'),
        full_name: 'Test User',
        is_active: true
      });

      // Create password reset record
      const crypto = require('crypto');
      resetToken = crypto.randomBytes(32).toString('hex');
      const hashedToken = crypto.createHash('sha256').update(resetToken).digest('hex');

      await db.PasswordReset.create({
        user_id: testUser.id,
        token_hash: hashedToken,
        expires_at: new Date(Date.now() + 3600000), // 1 hour
        used: false
      });
    });

    it('should reset password successfully with valid token', async () => {
      const response = await request(app)
        .post('/auth/reset-password')
        .send({
          token: resetToken,
          password: 'NewSecurePass123!'
        })
        .expect(200);

      expect(response.body.success).toBe(true);
      expect(response.body.message).toBe('Password reset successfully');
    });

    it('should fail with invalid token', async () => {
      const response = await request(app)
        .post('/auth/reset-password')
        .send({
          token: 'invalid-token',
          password: 'NewSecurePass123!'
        })
        .expect(400);

      expect(response.body.success).toBe(false);
    });

    it('should fail with expired token', async () => {
      // Update token to be expired
      await db.PasswordReset.update(
        { expires_at: new Date(Date.now() - 3600000) },
        { where: { user_id: testUser.id } }
      );

      const response = await request(app)
        .post('/auth/reset-password')
        .send({
          token: resetToken,
          password: 'NewSecurePass123!'
        })
        .expect(400);

      expect(response.body.success).toBe(false);
    });
  });

  describe('Rate Limiting', () => {
    it('should rate limit login attempts', async () => {
      const loginData = {
        email: 'test@example.com',
        password: 'WrongPassword123!'
      };

      // Make multiple failed login attempts
      for (let i = 0; i < 6; i++) {
        const response = await request(app)
          .post('/auth/login')
          .send(loginData);

        if (i < 5) {
          expect(response.status).toBe(401);
        } else {
          expect(response.status).toBe(429);
          expect(response.body.message).toContain('Too many login attempts');
        }
      }
    });

    it('should rate limit forgot password requests', async () => {
      // Make multiple forgot password requests
      for (let i = 0; i < 4; i++) {
        const response = await request(app)
          .post('/auth/forgot-password')
          .send({ email: 'test@example.com' });

        if (i < 3) {
          expect(response.status).toBe(200);
        } else {
          expect(response.status).toBe(429);
          expect(response.body.message).toContain('Too many password reset requests');
        }
      }
    });
  });

  describe('End-to-End Flow', () => {
    it('should complete full auth flow: register → login → protected API → success', async () => {
      // 1. Register user
      const userData = {
        email: 'e2e@example.com',
        password: 'SecurePass123!',
        full_name: 'E2E Test User'
      };

      const registerResponse = await request(app)
        .post('/auth/register')
        .send(userData)
        .expect(201);

      const accessToken = registerResponse.body.data.access_token;

      // 2. Use access token to call protected API
      const meResponse = await request(app)
        .get('/auth/me')
        .set('Authorization', `Bearer ${accessToken}`)
        .expect(200);

      expect(meResponse.body.data.user.email).toBe(userData.email);

      // 3. Refresh token
      const refreshToken = registerResponse.body.data.refresh_token;
      const refreshResponse = await request(app)
        .post('/auth/refresh')
        .send({ refresh_token: refreshToken })
        .expect(200);

      expect(refreshResponse.body.data.access_token).toBeDefined();

      // 4. Logout
      const logoutResponse = await request(app)
        .post('/auth/logout')
        .send({ refresh_token: refreshToken })
        .expect(200);

      expect(logoutResponse.body.success).toBe(true);
    });
  });
});
